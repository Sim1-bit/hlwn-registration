---
import LanguageSwitcher from './LanguageSwitcher.astro'

const { settings, registration, lang } = Astro.props
---
<section>
  <br>
  <LanguageSwitcher lang={lang} />
  <br>
  { registration.title && <h2 class="bs-h2 text-center" set:html={ registration.title } />}
  <br>

  <!-- Form di registrazione -->
   <form id="form" data-registration={JSON.stringify(registration).replace(/</g, '\\u003c')}>
      <label>
        {registration.name} : <input type="text" name="name" placeholder={registration.placeholders.name} required />
      </label>

      <label>
        {registration.surname} : <input type="text" name="surname" placeholder={registration.placeholders.surname} required />
      </label>

      <label>
        {registration.email} : <input type="email" name="email" placeholder={registration.placeholders.email} required />
      </label>
      <br>
      <label>
        {registration.password} : <input type="password" name="password" placeholder={registration.placeholders.password} required />
      </label>

      <label>
        {registration.confirmPassword} : <input type="password" name="confirmPassword" placeholder={registration.placeholders.confirmPassword} required />
      </label>

      <button id="btn">{registration.registerButton}</button>
  </form>

</section>

<script is:inline>

  const form = document.getElementById("form");
  const registration = JSON.parse(form.dataset.registration);

  form.addEventListener("submit", async (e) => {

    e.preventDefault();

    const name = form.name.value.trim();
    const surname = form.surname.value.trim();
    const email = form.email.value.trim();
    const pwd = form.password.value;
    const cPwd= form.confirmPassword.value;

    let numError = 0;

    if(!name || name.length < 3)
    {
      console.log(registration.errors.nameToShort);
      numError++;
    }

    if(!surname || surname.length < 3)
    {
      console.log(registration.errors.surnameToShort);
      numError++;
    }

    const regex = /^(?=.*\d)(?=.*[^a-zA-Z0-9]).*$/;
    if (!pwd || pwd.length < 8 || !regex.test(pwd)) 
    {
      console.log(registration.errors.passwordRequirements);
      numError++;
    }
    if(pwd !== cPwd)
    {
      console.log(registration.errors.passwordsDoNotMatch);
      numError++;
    }

    if(numError !== 0)
    {
      return;
    }

    const mapOBJ = {
      name,
      surname,
      email,
      password: pwd,
    };

    try 
    {
      const response = await fetch('https://tuo-server-esterno.com/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(mapOBJ),
      });

      const data = await response.json();
      console.log('Risposta server:', data);
    } 
    catch (err) 
    {
      console.error('Errore invio dati:', err);
    }
  });
</script>

<style is:global>
@import url('https://fonts.googleapis.com/css2?family=Creepster&family=Inter:wght@400;600&display=swap');

body {
  font-family: 'Inter', sans-serif;
  background-color: #000;
  color: #e6e6f0;
}

/* === CONTAINER FORM === */
section {
  max-width: 420px;
  margin: 3rem auto;
  padding: 2rem;
  background: rgba(20, 20, 30, 0.9);
  border: 1px solid rgba(143, 63, 255, 0.25);
  border-radius: 1.25rem;
  box-shadow: 0 0 20px rgba(143, 63, 255, 0.25);
  animation: glowPulse 3s ease-in-out infinite;
}

/* Effetto bagliore viola alternato */
@keyframes glowPulse {
  0%, 100% {
    box-shadow: 0 0 18px rgba(143, 63, 255, 0.35);
  }
  50% {
    box-shadow: 0 0 28px rgba(255, 216, 51, 0.25);
  }
}

/* === TITOLI === */
.bs-h2 {
  font-family: 'Creepster', cursive;
  color: #ffd833;
  font-size: 2.2rem;
  text-shadow: 0 0 8px rgba(255, 216, 51, 0.6);
}

/* === LABELS === */
form label {
  display: block;
  margin-bottom: 1rem;
  font-weight: 600;
  font-size: 1rem;
  color: #d4c9ff;
}

/* === INPUTS === */
form input {
  width: 100%;
  background: #1b1b1b;
  color: #ffd833;
  border: 1px solid rgba(143, 63, 255, 0.5);
  border-radius: 0.5rem;
  padding: 0.6rem 0.8rem;
  margin-top: 0.3rem;
  transition: all 0.25s ease;
}

form input::placeholder {
  color: #8f8f8f;
  opacity: 0.8;
}

form input:focus {
  outline: none;
  border-color: #8f3fff;
  box-shadow: 0 0 10px rgba(143, 63, 255, 0.6);
  background-color: #141414;
  transform: scale(1.02);
}

/* === BUTTON === */
button {
  width: 100%;
  margin-top: 1rem;
  background: linear-gradient(90deg, #8f3fff 0%, #ffd833 100%);
  color: #000;
  font-weight: 700;
  font-size: 1.1rem;
  border: none;
  border-radius: 0.75rem;
  padding: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

button:hover {
  filter: brightness(1.1);
  transform: translateY(-2px);
  box-shadow: 0 0 20px rgba(255, 216, 51, 0.4);
}

button:active {
  transform: scale(0.97);
}

/* === ERRORI === */
.error-msg {
  font-size: 0.9rem;
  color: #ff4d4d;
  margin-top: -0.5rem;
  margin-bottom: 0.8rem;
  display: block;
  font-style: italic;
}

/* === MOBILE === */
@media (max-width: 500px) {
  section {
    margin: 2rem 1rem;
    padding: 1.5rem;
  }
  .bs-h2 {
    font-size: 1.8rem;
  }
}

</style>